// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: market.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	QueryOffers(ctx context.Context, in *QueryOffersRequest, opts ...grpc.CallOption) (*QueryOffersResponse, error)
	PostOffer(ctx context.Context, in *PostOfferRequest, opts ...grpc.CallOption) (*PostOfferResponse, error)
	ListAllOffers(ctx context.Context, in *ListOffersRequest, opts ...grpc.CallOption) (*ListOFfersResponse, error)
	QueryBids(ctx context.Context, in *QueryBidsRequest, opts ...grpc.CallOption) (*QueryBidsResponse, error)
	PostBid(ctx context.Context, in *PostBidRequest, opts ...grpc.CallOption) (*PostBidResponse, error)
	ListBids(ctx context.Context, in *ListBidRequest, opts ...grpc.CallOption) (*ListBidResponse, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) QueryOffers(ctx context.Context, in *QueryOffersRequest, opts ...grpc.CallOption) (*QueryOffersResponse, error) {
	out := new(QueryOffersResponse)
	err := c.cc.Invoke(ctx, "/orca.Market/queryOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) PostOffer(ctx context.Context, in *PostOfferRequest, opts ...grpc.CallOption) (*PostOfferResponse, error) {
	out := new(PostOfferResponse)
	err := c.cc.Invoke(ctx, "/orca.Market/postOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ListAllOffers(ctx context.Context, in *ListOffersRequest, opts ...grpc.CallOption) (*ListOFfersResponse, error) {
	out := new(ListOFfersResponse)
	err := c.cc.Invoke(ctx, "/orca.Market/listAllOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) QueryBids(ctx context.Context, in *QueryBidsRequest, opts ...grpc.CallOption) (*QueryBidsResponse, error) {
	out := new(QueryBidsResponse)
	err := c.cc.Invoke(ctx, "/orca.Market/queryBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) PostBid(ctx context.Context, in *PostBidRequest, opts ...grpc.CallOption) (*PostBidResponse, error) {
	out := new(PostBidResponse)
	err := c.cc.Invoke(ctx, "/orca.Market/postBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ListBids(ctx context.Context, in *ListBidRequest, opts ...grpc.CallOption) (*ListBidResponse, error) {
	out := new(ListBidResponse)
	err := c.cc.Invoke(ctx, "/orca.Market/listBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	QueryOffers(context.Context, *QueryOffersRequest) (*QueryOffersResponse, error)
	PostOffer(context.Context, *PostOfferRequest) (*PostOfferResponse, error)
	ListAllOffers(context.Context, *ListOffersRequest) (*ListOFfersResponse, error)
	QueryBids(context.Context, *QueryBidsRequest) (*QueryBidsResponse, error)
	PostBid(context.Context, *PostBidRequest) (*PostBidResponse, error)
	ListBids(context.Context, *ListBidRequest) (*ListBidResponse, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) QueryOffers(context.Context, *QueryOffersRequest) (*QueryOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOffers not implemented")
}
func (UnimplementedMarketServer) PostOffer(context.Context, *PostOfferRequest) (*PostOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostOffer not implemented")
}
func (UnimplementedMarketServer) ListAllOffers(context.Context, *ListOffersRequest) (*ListOFfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllOffers not implemented")
}
func (UnimplementedMarketServer) QueryBids(context.Context, *QueryBidsRequest) (*QueryBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBids not implemented")
}
func (UnimplementedMarketServer) PostBid(context.Context, *PostBidRequest) (*PostBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBid not implemented")
}
func (UnimplementedMarketServer) ListBids(context.Context, *ListBidRequest) (*ListBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBids not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_QueryOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).QueryOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Market/queryOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).QueryOffers(ctx, req.(*QueryOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_PostOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).PostOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Market/postOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).PostOffer(ctx, req.(*PostOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ListAllOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ListAllOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Market/listAllOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ListAllOffers(ctx, req.(*ListOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_QueryBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).QueryBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Market/queryBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).QueryBids(ctx, req.(*QueryBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_PostBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).PostBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Market/postBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).PostBid(ctx, req.(*PostBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ListBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ListBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Market/listBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ListBids(ctx, req.(*ListBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orca.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryOffers",
			Handler:    _Market_QueryOffers_Handler,
		},
		{
			MethodName: "postOffer",
			Handler:    _Market_PostOffer_Handler,
		},
		{
			MethodName: "listAllOffers",
			Handler:    _Market_ListAllOffers_Handler,
		},
		{
			MethodName: "queryBids",
			Handler:    _Market_QueryBids_Handler,
		},
		{
			MethodName: "postBid",
			Handler:    _Market_PostBid_Handler,
		},
		{
			MethodName: "listBids",
			Handler:    _Market_ListBids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market.proto",
}
